// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/* ------------ MODELS ------------ */

model Resume {
  id           String   @id @default(cuid())
  userName     String
  userEmail    String
  originalName String
  fileName     String
  mimeType     String
  size         Int
  path         String
  uploadedAt   DateTime @default(now())

  educations   Education[]
  internships  Internship[]
  projects     Project[]
  achievements Achievement[]
  positions    Position[]
  extras       ExtraActivity[]
  skills       Skill[]
}

model Education {
  id        String  @id @default(cuid())
  resumeId  String
  institute String
  degree    String
  start     String?
  end       String?
  grade     String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Internship {
  id        String  @id @default(cuid())
  resumeId  String
  company   String
  title     String?
  location  String?
  start     String?
  end       String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  bullets   InternshipBullet[]
}

model InternshipBullet {
  id           String     @id @default(cuid())
  internshipId String
  text         String
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
}

model Project {
  id        String  @id @default(cuid())
  resumeId  String
  name      String
  summary   String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  bullets   ProjectBullet[]
}

model ProjectBullet {
  id        String  @id @default(cuid())
  projectId String
  text      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Achievement {
  id        String  @id @default(cuid())
  resumeId  String
  title     String
  detail    String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Position {
  id        String  @id @default(cuid())
  resumeId  String
  org       String?
  title     String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  bullets   PositionBullet[]
}

model PositionBullet {
  id         String   @id @default(cuid())
  positionId String
  text       String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model ExtraActivity {
  id        String  @id @default(cuid())
  resumeId  String
  title     String
  detail    String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String  @id @default(cuid())
  resumeId  String
  category  String
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  items     SkillItem[]
}

model SkillItem {
  id       String @id @default(cuid())
  skillId  String
  text     String
  skill    Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
}
